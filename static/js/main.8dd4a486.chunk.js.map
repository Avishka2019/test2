{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","movieName","setMovieName","_useState3","_useState4","review","setReview","_useState5","_useState6","foodList","setFoodList","_useState7","_useState8","updatePrice","setupdatePrice","_useState9","_useState10","updateName","setupdateName","useEffect","Axios","get","then","response","console","log","data","react_default","a","createElement","className","type","id","placeholder","name","onChange","e","target","value","onClick","post","price","map","val","key","movie","_id","put","concat","delete","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dd4a486.chunk.js","sourcesContent":["import React,{ useState , useEffect} from \"react\";\nimport Axios from \"axios\";\nimport \"./style/md/css/bootstrap.css\";\n//import \"./style/md/js/bootstrap.js\";\n\n\nfunction App() {\n    const [movieName, setMovieName] = useState(\"\");\n    const [review, setReview] = useState(\"\");\n    const[foodList, setFoodList]= useState([]);\n    const [updatePrice, setupdatePrice] = useState(\"\");\n    const [updateName, setupdateName] = useState(\"\");\nuseEffect(()=>{\n    Axios.get(\"http://localhost:5000/products\")\n    .then((response)=>{\n       console.log(response);\n        setFoodList(response.data);\n    });\n}, []);\n\n\n    const submitReview = () => {\n        console.log(movieName +review );\nAxios.post(\"http://localhost:5000/products\", {\n    name: movieName,\n    price: review,\n}).then(() => {\n    //alert(\"success\");\n    /*setFoodList([...foodList,\n       {\n    name: movieName,\n    \n    price: review\n},\n        ]);*/\n\n});\n\n};\n\nconst deleteR = (movie) => {\n    Axios.delete(`http://localhost:5000/delete/${movie}`);\n    console.log(movie);\n};\nconst updateR = (movie) => {\n    Axios.put(`http://localhost:5000/update/${movie}`\n        ,{\n    name: updateName,\n    price: updatePrice,\n});\n\n    console.log(movie);\n};\n\nreturn (\n    <div className=\"form\">\n\n\n\n\n\n<center><h1>Avi Production </h1></center>\n   <div className=\"card\" >\n  <div className=\"card-body\">\n   <h1>Add product</h1>\n     <div className=\"form-group\">\n       <label>Name</label>\n    <input type=\"name\" className=\"form-control\" id=\"name\"  placeholder=\"Enter Name\"\nname=\"movieName\"\nonChange={(e) => {\n    setMovieName(e.target.value);\n\n}}/>\n\n  </div>\n      <div className=\"form-group\">\n    <label>Price</label>\n    <input type=\"number\"  className=\"form-control\" id=\"phone\" placeholder=\"Enter Price\" name=\"review\" \n    onChange={(e) => {\n    setReview(e.target.value);\n\n}}/>\n  </div>\n<button className=\"btn btn-primary\" onClick={submitReview}>submit</button>\n\n     </div>\n</div>\n  <div className=\"card\" >\n  <div className=\"card-body\">\n<h1>List products</h1>\n</div>\n</div>\n{\n    foodList.map((val , key) =>{\n        return(\n        <div key={key} className=\"list\">\n\n\n        \n\n\n           \n   <div className=\"card\" >\n  <div className=\"card-body\">\n    <h5 className=\"card-title\">{val.name}</h5>\n    <p className=\"card-text\">LKR {val.price}</p>\n   \n        <div className=\"form-group\">\n    <label>Name</label>\n    <input type=\"text\"  className=\"form-control\" id=\"name\" placeholder=\"Update Name\" name=\"updateName\" onChange={(e)=>{\n            setupdateName(e.target.value);\n        }}/>\n  </div>\n      <div className=\"form-group\">\n    <label>Price</label>\n    <input type=\"number\"  className=\"form-control\" id=\"number\" placeholder=\"Update Price\" name=\"updatePrice\" onChange={(e)=>{\n            setupdatePrice(e.target.value);\n        }}/>\n  </div>\n        <br/> \n    <button className=\"btn btn-primary\"  onClick={()=>{updateR(val._id)}}>update</button>\n\n        <button className=\"btn btn-danger\" onClick={()=>{deleteR(val._id)}}>delete</button>\n     </div>\n</div>\n\n\n        </div>\n\n        );\n    })\n}\n\n\n</div>\n\n    );\n}\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}